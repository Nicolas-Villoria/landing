---
// src/components/BlogPreview.astro
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

// Get featured articles that are not drafts (max 3)
const allArticles = await getCollection('articles', ({ data }: { data: { draft?: boolean } }) => {
  return !data.draft;
});

// Sort by date and filter featured ones first
const sortedArticles = allArticles
  .sort((a: CollectionEntry<'articles'>, b: CollectionEntry<'articles'>) => 
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  )
  .filter((article: CollectionEntry<'articles'>) => article.data.featured)
  .slice(0, 3);

// If we don't have 3 featured articles, add more recent ones
let displayArticles = [...sortedArticles];
if (displayArticles.length < 3) {
  const nonFeaturedArticles = allArticles
    .filter((article: CollectionEntry<'articles'>) => !article.data.featured)
    .sort((a: CollectionEntry<'articles'>, b: CollectionEntry<'articles'>) => 
      b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
    )
    .slice(0, 3 - displayArticles.length);
  
  displayArticles = [...displayArticles, ...nonFeaturedArticles];
}

// Icon mapping for categories
const iconMap: Record<string, string> = {
  "Nutrición": `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20"></path><path d="M8 7h6"></path><path d="M8 11h8"></path><path d="M8 15h6"></path></svg>`,
  "Investigación": `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><path d="M14 2v6h6"></path><circle cx="10" cy="13" r="2"></circle><path d="m20 17-2-2-2 2-2-2-2 2"></path></svg>`,
  "Tratamiento": `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 22h2a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v6h6"></path><path d="M4.97 11.03 8 14.09l6.97-7.03"></path><path d="M12 16a4 4 0 1 1-8 0 4 4 0 0 1 8 0z"></path></svg>`,
  "Procedimientos": `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 3v4a1 1 0 0 0 1 1h4"></path><path d="M17 21H7a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7l5 5v11a2 2 0 0 1-2 2z"></path><line x1="9" y1="9" x2="10" y2="9"></line><line x1="9" y1="13" x2="15" y2="13"></line><line x1="9" y1="17" x2="15" y2="17"></line></svg>`,
  "Diagnóstico": `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path></svg>`,
  "Prevención": `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19.73 14c.77-.46 1.27-1.3 1.27-2.25 0-1.43-1.17-2.61-2.61-2.61-.77 0-1.46.32-1.96.82"></path><path d="M9 14c-.77-.46-1.27-1.3-1.27-2.25 0-1.43 1.17-2.61 2.61-2.61.77 0 1.46.32 1.96.82"></path><path d="M14.5 14a2.5 2.5 0 0 0 0-5"></path><path d="M16.61 12a3.14 3.14 0 0 0 0-3"></path><path d="M17.5 13a2.5 2.5 0 0 1 0-5"></path><path d="M8.5 14a2.5 2.5 0 0 1 0-5"></path><path d="M10.11 15a3.14 3.14 0 0 1 0-3"></path><path d="M6.61 12a3.14 3.14 0 0 1 0 3"></path><line x1="8" y1="22" x2="16" y2="22"></line><line x1="12" y1="17" x2="12" y2="22"></line></svg>`
};

// Default icon if category not found
const defaultIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>`;

// Get icon for a category
function getCategoryIcon(category: string): string {
  return iconMap[category] || defaultIcon;
}
---

<section id="blog" class="blog-section">
  <div class="container">
    <h2 class="section-title transition-item">Últimos Artículos</h2>
    
    <div class="blog-grid">
      {displayArticles.map((article, index) => (
        <article class="blog-card transition-item" data-delay={`${(index + 1) * 100}`}>
          <div class="blog-icon" set:html={getCategoryIcon(article.data.category)} />
          <div class="blog-content">
            <div class="blog-category">{article.data.category}</div>
            <h3 class="blog-title">{article.data.title}</h3>
            <p class="blog-excerpt">{article.data.description}</p>
            {article.data.externalLink ? (
              <a href={article.data.externalLink} class="blog-link" target="_blank" rel="noopener noreferrer">
                Leer más <span class="arrow">→</span>
              </a>
            ) : article.data.downloadFile ? (
              <a href={article.data.downloadFile} class="blog-link" download>
                Descargar <span class="arrow">→</span>
              </a>
            ) : (
              <a href={`/blog/${article.slug}`} class="blog-link">
                Leer más <span class="arrow">→</span>
              </a>
            )}
          </div>
        </article>
      ))}
    </div>
    
    <div class="blog-cta transition-item" data-delay="400">
      <a href="/blog" class="secondary-button">Ver todos los artículos</a>
    </div>
  </div>
</section>

<style>
  .blog-section {
    padding: 5rem 0;
    background-color: #f8f9fa;
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  
  .section-title {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: #2c3e50;
    position: relative;
  }
  
  .section-title::after {
    content: '';
    position: absolute;
    bottom: -15px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background-color: #4a90e2;
    border-radius: 2px;
  }
  
  .blog-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .blog-card {
    background-color: white;
    border-radius: 10px;
    padding: 2rem;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    height: 100%;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.03);
    transition: all 0.3s ease;
  }
  
  .blog-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.05);
  }
  
  .blog-icon {
    background-color: rgba(74, 144, 226, 0.1);
    color: #4a90e2;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 1.5rem;
  }
  
  .blog-content {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    align-self: flex-start;
  }
  
  .blog-category {
    display: inline-block;
    background-color: rgba(74, 144, 226, 0.1);
    color: #4a90e2;
    font-size: 0.8rem;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    margin-bottom: 0.75rem;
    font-weight: 500;
    align-self: flex-start;
  }
  
  .blog-title {
    font-size: 1.2rem;
    color: #2d3748;
    margin: 0 0 0.75rem;
    line-height: 1.4;
  }
  
  .blog-excerpt {
    font-size: 0.95rem;
    color: #4a5568;
    line-height: 1.6;
    margin: 0 0 1.25rem;
    flex-grow: 1;
  }
  
  .blog-link {
    color: #4a90e2;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    transition: all 0.2s ease;
    margin-top: auto;
  }
  
  .arrow {
    transition: transform 0.2s ease;
    margin-left: 0.25rem;
  }
  
  .blog-link:hover .arrow {
    transform: translateX(3px);
  }
  
  .blog-cta {
    display: flex;
    justify-content: center;
    margin-top: 6rem;
  }
  
  .secondary-button {
    padding: 0.75rem 2rem;
    background-color: transparent;
    color: #4a90e2;
    text-decoration: none;
    border-radius: 5px;
    font-weight: 500;
    border: 1px solid #4a90e2;
    transition: all 0.3s ease;
  }
  
  .secondary-button:hover {
    background-color: rgba(74, 144, 226, 0.05);
    transform: translateY(-2px);
  }
  
  @media (max-width: 992px) {
    .blog-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 5rem;
    }
    
    .container {
      padding: 0 3rem;
    }
  }
  
  @media (max-width: 768px) {
    .blog-section {
      padding: 4rem 0;
    }
    
    .section-title {
      font-size: 2rem;
      margin-bottom: 2rem;
    }
    
    .blog-grid {
      grid-template-columns: 1fr;
      gap: 4rem;
      max-width: 500px;
    }
    
    .blog-card {
      padding: 1.5rem;
      flex-direction: row;
      gap: 1.5rem;
    }
    
    .blog-icon {
      margin-bottom: 0;
      flex-shrink: 0;
    }
    
    .container {
      padding: 0 1.5rem;
    }
  }
  
  @media (max-width: 576px) {
    .blog-grid {
      gap: 4rem;
    }
    
    .blog-card {
      flex-direction: column;
    }
    
    .blog-icon {
      margin-bottom: 1rem;
    }
  }

  /* Transition styles */
  .transition-item {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }

  .transition-item.is-visible {
    opacity: 1;
    transform: translateY(0);
  }

  @media (prefers-reduced-motion: reduce) {
    .transition-item {
      transition: none;
      opacity: 1;
      transform: none;
    }
  }
</style>

<script>
  // Intersection Observer for scroll animations
  document.addEventListener('DOMContentLoaded', function() {
    const observerOptions = {
      root: null, // viewport
      rootMargin: '0px',
      threshold: 0.1 // Trigger when at least 10% of the target is visible
    };

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const target = entry.target as HTMLElement;
          const delay = target.getAttribute('data-delay') || '0';
          
          setTimeout(() => {
            target.classList.add('is-visible');
          }, parseInt(delay));
          
          // Stop observing after animation
          observer.unobserve(target);
        }
      });
    }, observerOptions);

    // Observe all transition items
    document.querySelectorAll('.transition-item').forEach(item => {
      observer.observe(item);
    });
  });
</script>
